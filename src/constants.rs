use ethers::{
    prelude::Lazy,
    types::{Address, Bytes, U256, U64},
};
use ethers_core::types::H160;
use std::str::FromStr;

pub static WEI: Lazy<U256> = Lazy::new(|| U256::from(10).pow(U256::from(18)));
pub static GWEI: Lazy<U256> = Lazy::new(|| U256::from(10).pow(U256::from(9)));

pub static DEFAULT_SENDER: Lazy<H160> =
    Lazy::new(|| H160::from_str("0x001a06BF8cE4afdb3f5618f6bafe35e9Fc09F187").unwrap());
pub static DEFAULT_RECIPIENT: Lazy<H160> =
    Lazy::new(|| H160::from_str("0x4E17607Fb72C01C280d7b5c41Ba9A2109D74a32C").unwrap());

pub static DEFAULT_CHAIN_ID: U64 = U64::one();
pub static ZERO_ADDRESS: Lazy<Address> =
    Lazy::new(|| Address::from_str("0x0000000000000000000000000000000000000000").unwrap());
pub static WETH_DECIMALS: u8 = 18;
pub static WETH_BALANCE_SLOT: u32 = 3;

pub fn get_env(key: &str) -> String {
    std::env::var(key).unwrap()
}

#[derive(Debug, Clone)]
pub struct Env {
    // pub https_url: String,
    pub wss_url: String,
    pub chain_id: U64,
    pub api_key: String,
}

impl Env {
    pub fn new() -> Self {
        Env {
            // https_url: get_env("HTTPS_URL"),
            wss_url: get_env("WSS_URL"),
            chain_id: U64::from_str(&get_env("CHAIN_ID")).unwrap(),
            api_key: get_env("API_KEY"),
        }
    }
}

// GUIDE: simulator code is the complied code located in ../contracts/src/Simulator.sol
// With the 'forge' build tool, 'forge build' creates output files under ../contracts/out
// we extract the hashed bytes tagged in "deployedBytecode.object" from ../contracts/out/Simulator.sol/Simulator.json
pub static SIMULATOR_CODE: Lazy<Bytes> = Lazy::new(|| {
    "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063054d50d41461005157806364bfce6f14610077578063cf62f25b1461009f578063ff53554e146100bc575b600080fd5b61006461005f366004610af5565b6100cf565b6040519081526020015b60405180910390f35b61008a610085366004610b4a565b61024f565b6040805192835260208301919091520161006e565b6100a7603281565b60405163ffffffff909116815260200161006e565b6100646100ca366004610b97565b61072c565b6000808411610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e5400000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000831180156101755750600082115b610201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161015c565b600061020f856103e5610bf2565b9050600061021d8483610bf2565b905060008261022e876103e8610bf2565b6102389190610c09565b90506102448183610c1c565b979650505050505050565b60008061027373ffffffffffffffffffffffffffffffffffffffff851686886107e5565b6000806000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610c75565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16101561034c57819350809250610353565b8093508192505b50506040517f054d50d4000000000000000000000000000000000000000000000000000000008152600481018990526024810183905260448101829052309063054d50d490606401602060405180830381865afa1580156103b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dc9190610cc5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529195506000918491908916906370a0823190602401602060405180830381865afa158015610451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104759190610cc5565b61047f9190610cde565b6040517f054d50d4000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260448101849052909150600090309063054d50d490606401602060405180830381865afa1580156104e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050c9190610cc5565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8916906370a0823190602401602060405180830381865afa15801561057c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a09190610cc5565b90506000808973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16106105e0578360006105e4565b6000845b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff8d169063022c0d9f9061064e9085908590309060248101610d15565b600060405180830381600087803b15801561066857600080fd5b505af115801561067c573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015285925073ffffffffffffffffffffffffffffffffffffffff8d1691506370a0823190602401602060405180830381865afa1580156106ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107109190610cc5565b61071a9190610cde565b97505050505050505094509492505050565b600061075073ffffffffffffffffffffffffffffffffffffffff831633308661086b565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de9190610cc5565b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261086691859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506108b7565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526108b19186918216906323b872dd9060840161081f565b50505050565b60006108d973ffffffffffffffffffffffffffffffffffffffff84168361094d565b905080516000141580156108fe5750808060200190518101906108fc9190610d91565b155b15610866576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161015c565b60606107de83836000610961565b92915050565b60608147101561099f576040517fcd78605900000000000000000000000000000000000000000000000000000000815230600482015260240161015c565b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516109c89190610db3565b60006040518083038185875af1925050503d8060008114610a05576040519150601f19603f3d011682016040523d82523d6000602084013e610a0a565b606091505b5091509150610a1a868383610a24565b9695505050505050565b606082610a3957610a3482610ab3565b6107de565b8151158015610a5d575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610aac576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161015c565b50806107de565b805115610ac35780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600060608486031215610b0a57600080fd5b505081359360208301359350604090920135919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b4557600080fd5b919050565b60008060008060808587031215610b6057600080fd5b84359350610b7060208601610b21565b9250610b7e60408601610b21565b9150610b8c60608601610b21565b905092959194509250565b60008060408385031215610baa57600080fd5b82359150610bba60208401610b21565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761095b5761095b610bc3565b8082018082111561095b5761095b610bc3565b600082610c52577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80516dffffffffffffffffffffffffffff81168114610b4557600080fd5b600080600060608486031215610c8a57600080fd5b610c9384610c57565b9250610ca160208501610c57565b9150604084015163ffffffff81168114610cba57600080fd5b809150509250925092565b600060208284031215610cd757600080fd5b5051919050565b8181038181111561095b5761095b610bc3565b60005b83811015610d0c578181015183820152602001610cf4565b50506000910152565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260008251806080840152610d5c8160a0850160208701610cf1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160a00195945050505050565b600060208284031215610da357600080fd5b815180151581146107de57600080fd5b60008251610dc5818460208701610cf1565b919091019291505056fea2646970667358221220649e7341c78d02da14f8e8074efe70ea869a413cb1474ee2ffeec9d910b3bbe064736f6c63430008110033"
        .parse()
        .unwrap()
});

// adapted from: https://github.com/gnosis/evm-proxy-detection/blob/main/src/index.ts
pub static EIP_1967_LOGIC_SLOT: &str =
    "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
pub static EIP_1967_BEACON_SLOT: &str =
    "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50";
pub static OPEN_ZEPPELIN_IMPLEMENTATION_SLOT: &str =
    "0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3";
pub static EIP_1882_LOGIC_SLOT: &str =
    "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7";

pub static IMPLEMENTATION_SLOTS: Lazy<Vec<U256>> = Lazy::new(|| {
    vec![
        U256::from(EIP_1967_LOGIC_SLOT),
        U256::from(EIP_1967_BEACON_SLOT),
        U256::from(OPEN_ZEPPELIN_IMPLEMENTATION_SLOT),
        U256::from(EIP_1882_LOGIC_SLOT),
    ]
});
