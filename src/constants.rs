use ethers::{
    prelude::Lazy,
    types::{Address, Bytes, U256, U64},
};
use ethers_core::types::H160;
use std::str::FromStr;

pub static WEI: Lazy<U256> = Lazy::new(|| U256::from(10).pow(U256::from(18)));
pub static GWEI: Lazy<U256> = Lazy::new(|| U256::from(10).pow(U256::from(9)));

pub static DEFAULT_SENDER: Lazy<H160> =
    Lazy::new(|| H160::from_str("0x001a06BF8cE4afdb3f5618f6bafe35e9Fc09F187").unwrap());
pub static DEFAULT_RECIPIENT: Lazy<H160> =
    Lazy::new(|| H160::from_str("0x4E17607Fb72C01C280d7b5c41Ba9A2109D74a32C").unwrap());

pub static DEFAULT_CHAIN_ID: U64 = U64::one();
pub static ZERO_ADDRESS: Lazy<Address> =
    Lazy::new(|| Address::from_str("0x0000000000000000000000000000000000000000").unwrap());

pub fn get_env(key: &str) -> String {
    std::env::var(key).unwrap()
}

#[derive(Debug, Clone)]
pub struct Env {
    // pub https_url: String,
    pub wss_url: String,
    pub chain_id: U64,
    pub api_key: String,
}

impl Env {
    pub fn new() -> Self {
        Env {
            // https_url: get_env("HTTPS_URL"),
            wss_url: get_env("WSS_URL"),
            chain_id: U64::from_str(&get_env("CHAIN_ID")).unwrap(),
            api_key: get_env("API_KEY"),
        }
    }
}

pub static SIMULATOR_CODE: Lazy<Bytes> = Lazy::new(|| {
    "0x608060405234801561001057600080fd5b50610d7f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063054d50d41461005157806364bfce6f14610077578063cf62f25b1461009f578063ff53554e146100bc575b600080fd5b61006461005f366004610a4b565b6100cf565b6040519081526020015b60405180910390f35b61008a610085366004610aa0565b61024f565b6040805192835260208301919091520161006e565b6100a7600a81565b60405163ffffffff909116815260200161006e565b6100646100ca366004610aed565b6106c6565b6000808411610165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e5400000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6000831180156101755750600082115b610201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161015c565b600061020f856103e5610b48565b9050600061021d8483610b48565b905060008261022e876103e8610b48565b6102389190610b5f565b90506102448183610b72565b979650505050505050565b60008061027373ffffffffffffffffffffffffffffffffffffffff85168688610781565b6000806000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156102c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e89190610bcb565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16101561034c57819350809250610353565b8093508192505b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260009184918916906370a0823190602401602060405180830381865afa1580156103c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ea9190610c1b565b6103f49190610c34565b6040517f054d50d4000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260448101849052909150309063054d50d490606401602060405180830381865afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e9190610c1b565b9450606461048d600a82610c47565b61049d9063ffffffff1687610b48565b6104a79190610b72565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290955060009073ffffffffffffffffffffffffffffffffffffffff8816906370a0823190602401602060405180830381865afa158015610517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053b9190610c1b565b90506000808873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161061057b5787600061057f565b6000885b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff8c169063022c0d9f906105e99085908590309060248101610c8f565b600060405180830381600087803b15801561060357600080fd5b505af1158015610617573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015285925073ffffffffffffffffffffffffffffffffffffffff8c1691506370a0823190602401602060405180830381865afa158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab9190610c1b565b6106b59190610c34565b965050505050505094509492505050565b60006106ea73ffffffffffffffffffffffffffffffffffffffff8316333086610807565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610754573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107789190610c1b565b90505b92915050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261080291859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610853565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff848116602483015283811660448301526064820183905261084d9186918216906323b872dd906084016107bb565b50505050565b600061087573ffffffffffffffffffffffffffffffffffffffff8416836108e9565b9050805160001415801561089a5750808060200190518101906108989190610d0b565b155b15610802576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161015c565b606061077883836000846000808573ffffffffffffffffffffffffffffffffffffffff16848660405161091c9190610d2d565b60006040518083038185875af1925050503d8060008114610959576040519150601f19603f3d011682016040523d82523d6000602084013e61095e565b606091505b509150915061096e86838361097a565b925050505b9392505050565b60608261098f5761098a82610a09565b610973565b81511580156109b3575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610a02576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260240161015c565b5080610973565b805115610a195780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600060608486031215610a6057600080fd5b505081359360208301359350604090920135919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a9b57600080fd5b919050565b60008060008060808587031215610ab657600080fd5b84359350610ac660208601610a77565b9250610ad460408601610a77565b9150610ae260608601610a77565b905092959194509250565b60008060408385031215610b0057600080fd5b82359150610b1060208401610a77565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761077b5761077b610b19565b8082018082111561077b5761077b610b19565b600082610ba8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80516dffffffffffffffffffffffffffff81168114610a9b57600080fd5b600080600060608486031215610be057600080fd5b610be984610bad565b9250610bf760208501610bad565b9150604084015163ffffffff81168114610c1057600080fd5b809150509250925092565b600060208284031215610c2d57600080fd5b5051919050565b8181038181111561077b5761077b610b19565b63ffffffff828116828216039080821115610c6457610c64610b19565b5092915050565b60005b83811015610c86578181015183820152602001610c6e565b50506000910152565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260008251806080840152610cd68160a0850160208701610c6b565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160a00195945050505050565b600060208284031215610d1d57600080fd5b8151801515811461097357600080fd5b60008251610d3f818460208701610c6b565b919091019291505056fea2646970667358221220a110ce2fb32f9d2d7d2bac4eb118d612857ac9ef4b791e6063ec05f4e44b18d664736f6c63430008110033"
        .parse()
        .unwrap()
});

// adapted from: https://github.com/gnosis/evm-proxy-detection/blob/main/src/index.ts
pub static EIP_1967_LOGIC_SLOT: &str =
    "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
pub static EIP_1967_BEACON_SLOT: &str =
    "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50";
pub static OPEN_ZEPPELIN_IMPLEMENTATION_SLOT: &str =
    "0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3";
pub static EIP_1882_LOGIC_SLOT: &str =
    "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7";

pub static IMPLEMENTATION_SLOTS: Lazy<Vec<U256>> = Lazy::new(|| {
    vec![
        U256::from(EIP_1967_LOGIC_SLOT),
        U256::from(EIP_1967_BEACON_SLOT),
        U256::from(OPEN_ZEPPELIN_IMPLEMENTATION_SLOT),
        U256::from(EIP_1882_LOGIC_SLOT),
    ]
});
