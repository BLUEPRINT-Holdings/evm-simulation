use ethers::{
    prelude::Lazy,
    types::{Address, Bytes, U256, U64},
};
use ethers_core::types::H160;
use std::str::FromStr;

pub static WEI: Lazy<U256> = Lazy::new(|| U256::from(10).pow(U256::from(18)));
pub static GWEI: Lazy<U256> = Lazy::new(|| U256::from(10).pow(U256::from(9)));

pub static DEFAULT_SENDER: Lazy<H160> =
    Lazy::new(|| H160::from_str("0x001a06BF8cE4afdb3f5618f6bafe35e9Fc09F187").unwrap());
pub static DEFAULT_RECIPIENT: Lazy<H160> =
    Lazy::new(|| H160::from_str("0x4E17607Fb72C01C280d7b5c41Ba9A2109D74a32C").unwrap());

pub static DEFAULT_CHAIN_ID: U64 = U64::one();
pub static ZERO_ADDRESS: Lazy<Address> =
    Lazy::new(|| Address::from_str("0x0000000000000000000000000000000000000000").unwrap());
pub static WETH_DECIMALS: u8 = 18;
pub static WETH_BALANCE_SLOT: u32 = 3;

pub fn get_env(key: &str) -> String {
    std::env::var(key).unwrap()
}

#[derive(Debug, Clone)]
pub struct Env {
    pub https_url: String,
    pub wss_url: String,
    pub chain_id: U64,
    pub api_key: String,
    pub priv_key: String,
}

impl Env {
    pub fn new() -> Self {
        Env {
            https_url: get_env("HTTPS_URL"),
            wss_url: get_env("WSS_URL"),
            // Don't use from_str for U64, it returns hex value of the string
            chain_id: U64::from_str(&get_env("CHAIN_ID")).unwrap(),
            api_key: get_env("API_KEY"),
            priv_key: get_env("PRIV_KEY"),
        }
    }
}

// GUIDE: simulator code is the complied code located in ../contracts/src/Simulator.sol
// With the 'forge' build tool, 'forge build' creates output files under ../contracts/out
// we extract the hashed bytes tagged in "deployedBytecode.object" from ../contracts/out/Simulator.sol/Simulator.json
pub static SIMULATOR_CODE: Lazy<Bytes> = Lazy::new(|| {
    "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063054d50d41461004657806364bfce6f1461006c578063ff53554e14610094575b600080fd5b610059610054366004610acd565b6100a7565b6040519081526020015b60405180910390f35b61007f61007a366004610b22565b610227565b60408051928352602083019190915201610063565b6100596100a2366004610b6f565b610704565b600080841161013d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e5400000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60008311801561014d5750600082115b6101d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f49515549444954590000000000000000000000000000000000000000000000006064820152608401610134565b60006101e7856103e5610bca565b905060006101f58483610bca565b9050600082610206876103e8610bca565b6102109190610be1565b905061021c8183610bf4565b979650505050505050565b60008061024b73ffffffffffffffffffffffffffffffffffffffff851686886107bd565b6000806000808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c09190610c4d565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1610156103245781935080925061032b565b8093508192505b50506040517f054d50d4000000000000000000000000000000000000000000000000000000008152600481018990526024810183905260448101829052309063054d50d490606401602060405180830381865afa158015610390573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b49190610c9d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529195506000918491908916906370a0823190602401602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610c9d565b6104579190610cb6565b6040517f054d50d4000000000000000000000000000000000000000000000000000000008152600481018290526024810185905260448101849052909150600090309063054d50d490606401602060405180830381865afa1580156104c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e49190610c9d565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8916906370a0823190602401602060405180830381865afa158015610554573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105789190610c9d565b90506000808973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16106105b8578360006105bc565b6000845b604080516000815260208101918290527f022c0d9f00000000000000000000000000000000000000000000000000000000909152919350915073ffffffffffffffffffffffffffffffffffffffff8d169063022c0d9f906106269085908590309060248101610ced565b600060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015285925073ffffffffffffffffffffffffffffffffffffffff8d1691506370a0823190602401602060405180830381865afa1580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190610c9d565b6106f29190610cb6565b97505050505050505094509492505050565b600061072873ffffffffffffffffffffffffffffffffffffffff8316333086610843565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b69190610c9d565b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261083e91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061088f565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526108899186918216906323b872dd906084016107f7565b50505050565b60006108b173ffffffffffffffffffffffffffffffffffffffff841683610925565b905080516000141580156108d65750808060200190518101906108d49190610d69565b155b1561083e576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610134565b60606107b683836000610939565b92915050565b606081471015610977576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610134565b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516109a09190610d8b565b60006040518083038185875af1925050503d80600081146109dd576040519150601f19603f3d011682016040523d82523d6000602084013e6109e2565b606091505b50915091506109f28683836109fc565b9695505050505050565b606082610a1157610a0c82610a8b565b6107b6565b8151158015610a35575073ffffffffffffffffffffffffffffffffffffffff84163b155b15610a84576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610134565b50806107b6565b805115610a9b5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080600060608486031215610ae257600080fd5b505081359360208301359350604090920135919050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b1d57600080fd5b919050565b60008060008060808587031215610b3857600080fd5b84359350610b4860208601610af9565b9250610b5660408601610af9565b9150610b6460608601610af9565b905092959194509250565b60008060408385031215610b8257600080fd5b82359150610b9260208401610af9565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761093357610933610b9b565b8082018082111561093357610933610b9b565b600082610c2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b80516dffffffffffffffffffffffffffff81168114610b1d57600080fd5b600080600060608486031215610c6257600080fd5b610c6b84610c2f565b9250610c7960208501610c2f565b9150604084015163ffffffff81168114610c9257600080fd5b809150509250925092565b600060208284031215610caf57600080fd5b5051919050565b8181038181111561093357610933610b9b565b60005b83811015610ce4578181015183820152602001610ccc565b50506000910152565b84815283602082015273ffffffffffffffffffffffffffffffffffffffff831660408201526080606082015260008251806080840152610d348160a0850160208701610cc9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160a00195945050505050565b600060208284031215610d7b57600080fd5b815180151581146107b657600080fd5b60008251610d9d818460208701610cc9565b919091019291505056fea2646970667358221220636791ad89e921ee804018b593828ebb2e00e35ad1df6bfe1a3ed553b2e141f764736f6c63430008140033"
        .parse()
        .unwrap()
});

// adapted from: https://github.com/gnosis/evm-proxy-detection/blob/main/src/index.ts
pub static EIP_1967_LOGIC_SLOT: &str =
    "0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc";
pub static EIP_1967_BEACON_SLOT: &str =
    "0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50";
pub static OPEN_ZEPPELIN_IMPLEMENTATION_SLOT: &str =
    "0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3";
pub static EIP_1882_LOGIC_SLOT: &str =
    "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7";

pub static IMPLEMENTATION_SLOTS: Lazy<Vec<U256>> = Lazy::new(|| {
    vec![
        U256::from(EIP_1967_LOGIC_SLOT),
        U256::from(EIP_1967_BEACON_SLOT),
        U256::from(OPEN_ZEPPELIN_IMPLEMENTATION_SLOT),
        U256::from(EIP_1882_LOGIC_SLOT),
    ]
});
